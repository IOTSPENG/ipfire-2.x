###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007-2017  IPFire Team  <info@ipfire.org>                     #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

VER        = 6.3.0

GMP_VER    = 5.0.5
MPFR_VER   = 2.4.2
MPC_VER    = 1.0.3

THISAPP    = gcc-$(VER)
DL_FILE    = $(THISAPP).tar.gz
DL_FROM    = $(URL_IPFIRE)
DIR_APP    = $(DIR_SRC)/$(THISAPP)

CFLAGS    := $(patsubst -march=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mfpu=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mtune=%,,$(CFLAGS))
CFLAGS    := $(patsubst -mfloat-abi=%,,$(CFLAGS))
CFLAGS    := $(filter-out -fexceptions,$(CFLAGS))
CXXFLAGS  := $(CFLAGS)

ifeq "$(BUILD_ARCH)" "armv7hl"
	FULL_BOOTSTRAP = 1
endif

ifeq "$(BUILD_ARCH)" "armv5tel"
	FULL_BOOTSTRAP = 1
endif

# Normal build or /tools build.
#
ifeq "$(ROOT)" ""
  TARGET = $(DIR_INFO)/$(THISAPP)
  EXTRA_CONFIG = \
	--prefix=/usr \
	--libexecdir=/usr/lib \
	--enable-shared \
	--enable-threads=posix \
	--enable-__cxa_atexit \
	--enable-clocale=gnu \
	--enable-languages=c,c++ \
	--disable-bootstrap \
	--disable-nls
  EXTRA_MAKE =
  EXTRA_INSTALL =
else
ifeq "$(PASS)" "1"
  TARGET = $(DIR_INFO)/$(THISAPP)-tools1
  EXTRA_CONFIG = \
	--target=$(CROSSTARGET) \
	--prefix=/tools \
	--with-sysroot=$(ROOT) \
	--with-local-prefix=/tools \
	--with-native-system-header-dir=/tools/include \
	--disable-nls \
	--disable-shared \
	--disable-decimal-float \
	--disable-threads \
	--disable-libatomic \
	--disable-libmudflap \
	--disable-libssp \
	--disable-libmpx \
	--disable-libgomp \
	--disable-libquadmath \
	--disable-libstdc++-v3 \
	--disable-libvtv \
	--disable-libcilkrts \
	--disable-libitm \
	--disable-libsanitizer \
	--with-newlib \
	--without-headers \
	--without-ppl \
	--without-cloog \
	--enable-languages=c,c++
  EXTRA_MAKE = 
  EXTRA_INSTALL = 
else
ifeq "$(PASS)" "2"
  TARGET = $(DIR_INFO)/$(THISAPP)-tools2
  EXTRA_ENV = \
	CC="$(CROSSTARGET)-gcc" \
	CXX="$(CROSSTARGET)-g++" \
	AR="$(CROSSTARGET)-ar" \
	RANLIB="$(CROSSTARGET)-ranlib"
  EXTRA_CONFIG = \
	--build=$(BUILDTARGET) \
	--prefix=/tools \
	--with-local-prefix=/tools \
	--with-native-system-header-dir=/tools/include \
	--enable-languages=c,c++ \
	--disable-libstdcxx-pch \
	--disable-libgomp
  EXTRA_MAKE = 
  EXTRA_INSTALL = 

  ifeq "$(FULL_BOOTSTRAP)" "1"
	EXTRA_CONFIG += --enable-bootstrap
  else
	EXTRA_CONFIG += --disable-bootstrap
  endif
else
  # PASS=L # libstdc++-v3
  TARGET = $(DIR_INFO)/$(THISAPP)-libstdc++
  EXTRA_ENV = \
	CC="$(CROSSTARGET)-gcc" \
	AR="$(CROSSTARGET)-ar" \
	RANLIB="$(CROSSTARGET)-ranlib"
  EXTRA_CONFIG = \
	--host=$(CROSSTARGET) \
	--prefix=/tools \
	--with-sysroot=$(ROOT) \
	--disable-shared \
	--disable-nls \
	--disable-libstdcxx-threads \
	--disable-libstdcxx-pch \
	--with-gxx-include-dir=/tools/$(CROSSTARGET)/include/c++/$(VER)
  EXTRA_MAKE = 
  EXTRA_INSTALL = 
endif
endif
endif

ifeq "$(BUILD_ARCH)" "armv7hl"
	EXTRA_CONFIG += \
		--with-float=hard
endif

ifeq "$(BUILD_ARCH)" "armv5tel"
	EXTRA_CONFIG += \
		--with-float=soft \
		--disable-sjlj-exceptions
endif

ifeq "$(BUILD_ARCH)" "i586"
	EXTRA_CONFIG += \
		--with-arch=i586 \
		--with-tune=generic
endif

EXTRA_CONFIG += \
	--disable-multilib \
	--with-bugurl=http://bugtracker.ipfire.org \
	--disable-libunwind-exceptions \
	--enable-gnu-unique-object

export XCFLAGS = $(CFLAGS)
export TCFLAGS = $(CFLAGS)

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE) \
	gmp-$(GMP_VER).tar.bz2 \
	mpfr-$(MPFR_VER).tar.bz2 \
	mpc-$(MPC_VER).tar.gz

$(DL_FILE) = $(DL_FROM)/$(DL_FILE)
gmp-$(GMP_VER).tar.bz2 = $(DL_FROM)/gmp-$(GMP_VER).tar.bz2
mpfr-$(MPFR_VER).tar.bz2 = $(DL_FROM)/mpfr-$(MPFR_VER).tar.bz2
mpc-$(MPC_VER).tar.gz = $(DL_FROM)/mpc-$(MPC_VER).tar.gz

$(DL_FILE)_MD5			= 6e5ea04789678f1250c1b30c4d9ec417
gmp-$(GMP_VER).tar.bz2_MD5	= 041487d25e9c230b0c42b106361055fe
mpfr-$(MPFR_VER).tar.bz2_MD5	= 89e59fe665e2b3ad44a6789f40b059a0
mpc-$(MPC_VER).tar.gz_MD5	= d6a1d5f8ddea3abd2cc3e98f58352d26

install : $(TARGET)

check : $(patsubst %,$(DIR_CHK)/%,$(objects))

download :$(patsubst %,$(DIR_DL)/%,$(objects))

md5 : $(subst %,%_MD5,$(objects))

###############################################################################
# Downloading, checking, md5sum
###############################################################################

$(patsubst %,$(DIR_CHK)/%,$(objects)) :
	@$(CHECK)

$(patsubst %,$(DIR_DL)/%,$(objects)) :
	@$(LOAD)

$(subst %,%_MD5,$(objects)) :
	@$(MD5)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : $(patsubst %,$(DIR_DL)/%,$(objects))
	@$(PREBUILD)
	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build && cd $(DIR_SRC) && tar axf $(DIR_DL)/$(DL_FILE)
	@mkdir $(DIR_SRC)/gcc-build

	cd $(DIR_APP) && sed -i 's/install_to_$$(INSTALL_DEST) //' libiberty/Makefile.in
	cd $(DIR_APP) && sed -i gcc/Makefile.in \
		-e 's@\./fixinc\.sh@-c true@' \
		-e 's/^T_CFLAGS =$$/& -fomit-frame-pointer/'

ifeq "$(TOOLCHAIN)" "1"
	# Build gmp and mpfr internally in toolchain.
	cd $(DIR_APP) && tar xfa $(DIR_DL)/gmp-$(GMP_VER).tar.bz2
	cd $(DIR_APP) && mv -v gmp-$(GMP_VER) gmp
	cd $(DIR_APP) && tar xfa $(DIR_DL)/mpfr-$(MPFR_VER).tar.bz2
	cd $(DIR_APP) && mv -v mpfr-$(MPFR_VER) mpfr
	cd $(DIR_APP) && tar xfa $(DIR_DL)/mpc-$(MPC_VER).tar.gz
	cd $(DIR_APP) && mv -v mpc-$(MPC_VER) mpc

ifeq "$(PASS)" "2"
	cd $(DIR_APP) && cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
			`dirname $$(/tools/bin/$(CROSSTARGET)-gcc -print-libgcc-file-name)`/include-fixed/limits.h
endif

	for file in $$(find $(DIR_APP)/gcc/config -name linux64.h -o -name linux.h \
			-o -name sysv4.h -o -name linux-eabi.h -o -name linux-elf.h -o -name aarch64-linux.h); do \
		echo "Processing $${file}..."; \
		sed -i $${file} \
			-e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
			-e 's@/usr@/tools@g'; \
		echo '#undef STANDARD_STARTFILE_PREFIX_1' >> $${file}; \
		echo '#undef STANDARD_STARTFILE_PREFIX_2' >> $${file}; \
		echo '#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"' >> $${file}; \
		echo '#define STANDARD_STARTFILE_PREFIX_2 ""' >> $${file}; \
	done
endif

ifeq "$(PASS)" "L"
	# libstdc++ pass
	cd $(DIR_SRC)/gcc-build && \
		$(EXTRA_ENV) \
		$(DIR_APP)/libstdc++-v3/configure \
			$(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install

else
	# The actual build.
	cd $(DIR_SRC)/gcc-build && \
		$(EXTRA_ENV) \
		$(DIR_APP)/configure \
			$(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
endif

ifeq "$(TOOLCHAIN)" "1"
 ifeq "$(PASS)" "1"
	ln -svf libgcc.a $$(/tools/bin/$(CROSSTARGET)-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/')
 endif

 ifeq "$(PASS)" "2"
	ln -svf gcc /tools/bin/cc
	# remove gdb python files from libdir
	rm -rf /tools/lib/*-gdb.py
 endif

 ifeq "$(PASS)" "L"
	# Workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70936
	sed -e "s/^#include_next/#include/" -i /tools/$(CROSSTARGET)/include/c++/$(VER)/cstdlib
 endif

else # NON-TOOLCHAIN
	ln -svf ../usr/bin/cpp /lib
	ln -svf gcc /usr/bin/cc
	# remove gdb python files from libdir
	rm -rf /usr/lib/*-gdb.py
endif

	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build
	@$(POSTBUILD)
